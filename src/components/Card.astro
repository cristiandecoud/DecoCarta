---
export interface Props {
	conf: {cardWidth: number}
  body: string
  layers: string[]
  title: string
}

export interface Dimensions {
	bottom: number
	hMedium: number
	left: number
	right: number
	top: number
	vMedium: number
}

const { layers, title, body, conf } = Astro.props;
let gap = 15;
let numberLayers = 0;
const cardWidth = conf.cardWidth

function countLayers(layers: string[]): number {
	return layers.length;
}

function setGap(numberOfLayers: number, cardWidth: number): number {
	return cardWidth / numberOfLayers
}

function setLayerSeparation(index: number) {
	return  `transform: translateZ(${index*gap}px)`
}

numberLayers = countLayers(layers)
gap = setGap(numberLayers, cardWidth)
---
<div id="wrapper">
	<div class="card" id="card">

		{layers.map((data, i) => 
			<div class='layer' style={setLayerSeparation(i)}>
				<img src={layers[i]} />
			</div>
		)}
		<div class="left side"></div>
		<div class="right side"></div> 
		<div class="top side"></div>
		<div class="bottom side"></div> 
	</div>
</div>

<script>
	// import type { Dimensions } from "./Card.astro"

	let wrapper = document.getElementById("wrapper")
	let card = document.getElementById("card")
	// let rect = wrapper?.getBoundingClientRect()

	wrapper?.addEventListener("mouseover", (event: MouseEvent) => {
		const target = event.target
		document.onmousemove = (event) => {
			let x = event.x
			let y = event.y
			if(card) card.style.transform = `rotate3d(${(x-390)/10}, ${(y-276)/10}, ${0.2}, 25deg)`
		};
	})
	
	// let dim = rect && calculateDimension(rect)
	// function calculateDimension(rect: DOMRect): Dimensions {
	// 	const { top, bottom, right, left } = rect

	// 	return {
	// 		top, bottom, right, left, 
	// 		hMedium: (left + right)/2, 
	// 		vMedium: (top + bottom)/2
	// 	};
	// }

	// function isInside(dim: Dimensions, mouse: {x: number, y: number}) {
	// 	return (dim.left < mouse.x && mouse.x < dim.right) && (dim.top < mouse.y && mouse.y < dim.bottom)
	// }
</script>
<style>
:root {
	--sides-color: rgb(68, 68, 68);
	--aspect-ratio: 1.68;
	--card-width: 300px;
	--card-height: calc(var(--card-width)*var(--aspect-ratio));
	--card-thickness: 45px;
	--center-sides: calc((var(--card-width) / 2) - var(--card-thickness) / 2);
	--center-top-bottom: calc((var(--card-height) / 2) - var(--card-thickness) / 2);
	--shadow-layers: drop-shadow(8px 8px 8px #000000e1);
}

	#wrapper {
		width: var(--card-width);
		height: var(--card-height);
		perspective: 1000px;
	}
	
	.card {
		width: 100%;
		height: 100%;
		position: relative;
    transform-style: preserve-3d;
		transform: translateZ(-100px);
  }

	.layer {
		box-sizing: border-box;
		position: absolute;
		width: 100%;
		height: 100%;
		/* border: 1px solid #a5a5a5; */
		/* border-radius: 10px; */
		padding: 5px;
		filter: var(--shadow-layers);
	}

  img {
    width: 100%;
    height: 100%;
    border-radius: 5px;
  }

  .layer:first-child {
    background-color: var(--sides-color);
		filter: drop-shadow(0);
  }

	.side {
		position: absolute;
		width: 100%;
		height: 100%;
		background-color: var(--sides-color);
	}

	.left {
		transform: rotateY(-90deg) translateZ(calc(var(--card-width) / 2));
		width: var(--card-thickness);
		left: var(--center-sides);
	}

	.right {
		transform: rotateY(90deg) translateZ(calc(var(--card-width) / 2));
		width: var(--card-thickness);
		left: var(--center-sides);
	}

	.top {
		transform: rotateX(-90deg) translateZ(calc(var(--card-height) / 2));
		height: var(--card-thickness);
		top: var(--center-top-bottom);
	}

	.bottom {
		transform: rotateX(90deg) translateZ(calc(var(--card-height) / 2));
		height: var(--card-thickness);
		top: var(--center-top-bottom);
	}
</style>
